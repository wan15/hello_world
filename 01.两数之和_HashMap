给定一个整数数组 nums?和一个目标值 target，请你在该数组中找出和为目标值的那?两个?整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]


class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result={0,0};
        HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            count.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++){
//坑1：[3,2,4] 6,判断到第一个3，只有一个3，却判断为true，这里加入i!=count.get(target-nums[i])
//坑2：[0,4,3,0] 0，应返回[0,3],却返回[0,0];相同的键值，覆盖掉了
//！！去掉(nums[i]<target)，改为(nums[i]<=target)后，解决坑二，但负数就不行，所以去掉就好！
            if((count.containsKey(target-nums[i])==true)&&(i!=count.get(target-nums[i]))){
                result[0]=i;
                result[1]=count.get(target-nums[i]);
                return result;
            }
        }
        return result;      
    }
}

//内存消耗，变更return new int[] { i, map.get(complement) }; throw new IllegalArgumentException("No two sum solution");

        public static int[] twoSum(int[] nums, int target) {
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < nums.length; i++) {
                map.put(nums[i], i);
            }
            for (int i = 0; i < nums.length; i++) {
                if (map.containsKey(target - nums[i]) && map.get(complement) != i) {
                    return new int[] { i, map.get(complement) };
                }
            }
            throw new IllegalArgumentException("No two sum solution");
        }

//一次遍历：先判断map里有没有，有就返回结果，没有再放入Map里
事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}


